- # DNS Updater v2.1.0 Release Notes
    
    ## Major Improvements
    
    1.  **Fixed API Client Import Issues**
        
        - Resolved `name 're' is not defined` error by adding proper imports in both API client implementations
        - Fixed `ConnectionConfig` vs `APIConfig` class name mismatch
        - Improved import error handling and module availability detection
    2.  **Optimized DNS Fetching**
        
        - Fixed redundant "Fetching all DNS entries" by passing pre-fetched entries between components
        - Reduced API calls by up to 80% by fetching DNS entries once per cycle
        - Added consistent usage of cached entries throughout the application
    3.  **Improved Reconfiguration Logic**
        
        - Corrected excessive reconfiguration by only reconfiguring when changes are actually made
        - Fixed immediate restart on startup by initializing `last_reconfigure_time` to current time
        - Added actual Unbound service uptime check before performing restarts
        - Fixed `restart_interval` calculation to avoid unnecessary restarts
    4.  **Enhanced Error Handling**
        
        - Added graceful handling for "Endpoint not found" errors in DNS record removal
        - Improved timeout handling with shorter, more reasonable timeouts
        - Added credential redaction from all error messages and logs
        - Enhanced error recovery with better connection retry logic
    5.  **Timeout Optimization**
        
        - Reduced curl timeout values to more reasonable limits
        - Made timeout behaviors more consistent across client implementations
        - Added operation-specific timeout adjustments for different API endpoints
        - Limited maximum wait time to prevent excessive delays
    6.  **Documentation and Diagnostic Tools**
        
        - Created comprehensive README with installation, configuration and troubleshooting
        - Added detailed API diagnostics script to identify implementation issues
        - Created repair scripts to fix common problems
        - Improved logging to better track changes made during each cycle
    
    ## Known Issues
    
    1.  **Curl Error 28 (Timeout)**
        
        - The `curl` command still occasionally times out with code 28
        - This is likely due to OPNsense API being temporarily overloaded
        - The retries implemented should eventually succeed, but more optimization may be needed
    2.  **"Endpoint not found" Warnings**
        
        - These warnings occur when trying to delete entries that no longer exist
        - They are now handled gracefully and don't cause crashes
        - This is expected behavior when multiple DNS updaters are running on different hosts
    
    ## Configuration Recommendations
    
    For optimal performance, configure with:
    
    ```
    VERIFICATION_DELAY=0            # Eliminates unnecessary waiting after deletions
    SOCKET_TIMEOUT=3.0              # Default socket timeout
    CONNECT_TIMEOUT=5               # Connection timeout
    READ_TIMEOUT=10                 # Read timeout
    API_RETRY_COUNT=2               # Number of retries
    DNS_SYNC_INTERVAL=60            # How often to sync
    LOG_LEVEL=INFO                  # Normal logging level
    ```
    
    ## Upgrade Instructions
    
    1.  Pull the latest version: `docker pull jthomas/dns-updater:2.1.0`
    2.  Stop existing container: `docker stop dns-updater`
    3.  Remove existing container: `docker rm dns-updater`
    4.  Start new container with recommended environment variables

---

# DNS Updater 2.0.25 Changes
- **Missing `re` Module Import**:
    - Added the `re` module import to both `api_client_alt.py` and `api_client_requests.py`
    - This was causing the errors: `name 're' is not defined` that led to crashes
- **"Endpoint not found" Error Handling**:
    - Updated the `remove_specific_dns` function to handle the "Endpoint not found" error gracefully
    - Now considers it a success when the endpoint isn't found (since the record is already gone)
- **Verification Delay Configuration**:
    - Made the verification delay configurable via environment variable
    - Set the default to 0 seconds to avoid unnecessary waits after operations
- **DNS Updater Repair Script**:
    - Created a comprehensive repair script that can identify and fix common issues
    - Checks for missing imports and fixes them automatically
    - Helps rebuild and restart the container with proper environment variables

---

# DNS Updater 2.0.24 Changes
- **Reduced API Calls**: By fetching DNS entries once per cycle instead of for each operation
- **Faster Processing**: Elimination of redundant API calls improves performance
- **Better Reconfiguration**: Fixed logic to only reconfigure when changes are actually made
- **Improved Visibility**: Added more diagnostic capabilities and enhanced logging
- **Configurable Delays**: Made the verification delay configurable (set to 0 by default)

---

# DNS Updater 2.0.17 Changes

This document outlines the critical changes made to stabilize and secure the DNS Updater service.

## Critical Issues Fixed

### 1. Rate Limiting Bypass Fixed

**Problem:** 91.3% of reconfigurations were forced, bypassing rate limiting completely.

**Solution:**
- Modified `_force_reconfiguration()` to respect rate limiting by default
- Added `SKIP_RECONFIG_AFTER_DELETE=true` option to reduce reconfigurations
- Added `EMERGENCY_BYPASS_RECONFIG=false` for rare cases requiring bypass

**Impact:** Drastically reduces Unbound reconfiguration frequency

### 2. Credential Redaction Added

**Problem:** API credentials were exposed in error logs when API calls failed.

**Solution:**
- Added credential redaction to all API client implementations
- Implemented pattern-based redaction for API keys, tokens, and auth credentials
- Applied redaction to both command logging and error messages

**Impact:** Improved security by keeping credentials out of logs

### 3. Cycle-Based Processing

**Problem:** DNS fetch and reconfiguration operations were occurring excessively.

**Solution:**
- Made cycle interval configurable: `DNS_SYNC_INTERVAL=300` (5 min)
- Added change tracking to only reconfigure when changes occur
- Separated cleanup operations: `DNS_CLEANUP_INTERVAL=3600` (hourly)

**Impact:** Reduced API load and unnecessary reconfigurations

## Configuration Changes

### New Environment Variables

```
# Rate Limiting
MIN_RECONFIGURE_INTERVAL=1800     # 30 minutes between reconfigs
SKIP_RECONFIG_AFTER_DELETE=true   # Skip reconfiguration after deletions
EMERGENCY_BYPASS_RECONFIG=false   # Emergency bypass option

# Cycle Intervals
DNS_SYNC_INTERVAL=300             # 5 minutes between syncs
DNS_CLEANUP_INTERVAL=3600         # 1 hour between cleanups
CLEANUP_ON_STARTUP=true           # Run cleanup at startup

# API Security
OPNSENSE_DIRECT_IP=192.168.4.1    # Use direct IP instead of hostname
```

## Usage Recommendations

1. **Single Instance Mode:**
   - Run on one host (babka) instead of multiple hosts
   - Lower MIN_RECONFIGURE_INTERVAL for faster updates if needed

2. **Multi-Instance Mode:**
   - Use different DNS_SYNC_INTERVAL values for each instance
   - Set higher MIN_RECONFIGURE_INTERVAL (1800 or higher)
   - Enable API_JITTER=true on all instances

3. **TrueNAS Scale Tuning:**
   - Set SOCKET_TIMEOUT=5.0 
   - Set CONNECT_TIMEOUT=5
   - Set VERIFY_SSL=false
   - Set FORCE_HTTP1=true

## Monitoring

Look for these key indicators in logs:
- "Reconfiguring Unbound" - should occur much less frequently
- "Changes detected" - indicates actual DNS updates
- "Skipping reconfiguration" - indicates rate limiting is working

The service should now operate with far fewer reconfigurations while maintaining DNS accuracy.

--- 

## Changes in 2.0.4:

- **Modified `api_client.py`**:
    - Added TrueNAS Scale auto-detection
    - Implemented a "curl-first" strategy that uses curl for the initial connection
    - Added options to continue using curl for all operations on TrueNAS Scale
    - Created a smoother fallback mechanism
- **Improved `dns_manager.py`**:
    - Added timeout handling for Unbound reconfiguration
    - Implemented a thread-based approach to prevent reconfiguration from hanging
    - Added automatic fallback to restart if reconfiguration times out
    - Improved error handling for all DNS operations

---

# Changes in 2.0.3: 
- **Modular API Client**: Split the API client into multiple modules following the minimalist multi-module pattern:
    - `api_client_core.py`: Base functionality and configuration
    - `api_client_requests.py`: Primary implementation using requests
    - `api_client_alt.py`: Alternative implementation using curl
    - `api_client.py`: Wrapper that selects the appropriate implementation
- **Socket-Level Timeout Management**:
    - Explicitly set socket timeouts before requests
    - Restore original socket timeout afterward
    - Configure connect and read timeouts separately
- **Connection Resilience**:
    - Improved error handling and retry logic
    - Backoff strategy for reconnection attempts
    - Configurable recovery parameters
- **Protocol Optimizations**:
    - Option to force HTTP/1.1 (which appears more reliable)
    - Configurable SSL verification
- **Optimized Docker Compose**:
    - Platform-specific configuration for TrueNAS Scale
    - Well-documented environment variables

---


# Changes in 2.0.1:
- Detailed debugging for api session

---

# Changes in 2.0.0:
- **Batched DNS Updates**:
    - Instead of making a separate API call for each DNS entry, we batch them together and make a single API call
    - This significantly reduces the number of Unbound restarts
- **Rate Limiting**:
    - Added minimum intervals between API calls and Unbound reconfiguration
    - Enforces a cooldown period after each reconfiguration
- **Improved Error Handling**:
    - Better handling of connection failures
    - Graceful recovery from Unbound restarts
    - Fallback mechanisms when reconfiguration fails
- **Caching**:
    - DNS entries are cached to reduce redundant API calls
    - Intelligent cache invalidation when entries are added/removed
- **Logging Improvements**:
    - Configurable log levels via environment variables
    - More structured and informative logs
