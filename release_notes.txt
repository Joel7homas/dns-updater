# DNS Updater 2.1.0 Release Notes

## Major Improvements

1.  **Set-Based Network Management**
    
    - Implemented a new set-based approach for container IP address management
    - Eliminated IP address "flapping" for containers with multiple networks
    - Drastically reduced unnecessary Unbound reconfigurations
    - Improved service availability to 100% in testing
2.  **Improved State Tracking**
    
    - Added ContainerNetworkState class to track container network changes
    - Implemented intelligent change detection between cycles
    - Only performs DNS updates when actual network changes occur
3.  **Enhanced Stability**
    
    - Reduced Unbound reconfiguration frequency by ~90% in testing
    - Eliminated repeated removal/addition of the same DNS entries
    - Fixed domain comparison logic to properly recognize existing entries
4.  **Performance Optimizations**
    
    - Reduced API calls with improved caching
    - More efficient batch processing of DNS changes
    - Optimized Unbound reconfiguration scheduling
5.  **Improved Diagnostics**
    
    - Added detailed logging for network state changes
    - Better tracking of which entries are added/removed and why
    - Clearer logs about DNS synchronization outcomes

## Known Issues

1.  **Initial Synchronization**
    
    - First run after upgrade may perform a full synchronization
    - This is expected behavior and subsequent cycles will use the new set-based approach
2.  **Legacy DNS Records**
    
    - Existing duplicate DNS records may need cleanup
    - Consider running a one-time cleanup using dns-mass-cleanup.py script

---

# DNS Updater 2.0.28 Changes

- **Fixed API Client Import Issues**:
    - Resolved lingering `name 're' is not defined` error by adding proper imports in both API client implementations
    - Fixed `ConnectionConfig` vs `APIConfig` class name mismatch
    - Improved import error handling and module availability detection
- **Optimized DNS Fetching**:
    - Fixed redundant "Fetching all DNS entries" by passing pre-fetched entries between components
    - Reduced API calls by up to 80% by fetching DNS entries once per cycle
    - Added consistent usage of cached entries throughout the application
- **Improved Reconfiguration Logic**:
    - Corrected excessive reconfiguration by only reconfiguring when changes are actually made
    - Fixed immediate restart on startup by initializing `last_reconfigure_time` to current time
    - Added actual Unbound service uptime check before performing restarts
    - Fixed `restart_interval` calculation to avoid unnecessary restarts

---

# DNS Updater 2.0.25 Changes
- **Missing `re` Module Import**:
    - Added the `re` module import to both `api_client_alt.py` and `api_client_requests.py`
    - This was causing the errors: `name 're' is not defined` that led to crashes
- **"Endpoint not found" Error Handling**:
    - Updated the `remove_specific_dns` function to handle the "Endpoint not found" error gracefully
    - Now considers it a success when the endpoint isn't found (since the record is already gone)
- **Verification Delay Configuration**:
    - Made the verification delay configurable via environment variable
    - Set the default to 0 seconds to avoid unnecessary waits after operations
- **DNS Updater Repair Script**:
    - Created a comprehensive repair script that can identify and fix common issues
    - Checks for missing imports and fixes them automatically
    - Helps rebuild and restart the container with proper environment variables

---

# DNS Updater 2.0.24 Changes
- **Reduced API Calls**: By fetching DNS entries once per cycle instead of for each operation
- **Faster Processing**: Elimination of redundant API calls improves performance
- **Better Reconfiguration**: Fixed logic to only reconfigure when changes are actually made
- **Improved Visibility**: Added more diagnostic capabilities and enhanced logging
- **Configurable Delays**: Made the verification delay configurable (set to 0 by default)

---

# DNS Updater 2.0.17 Changes

This document outlines the critical changes made to stabilize and secure the DNS Updater service.

## Critical Issues Fixed

### 1. Rate Limiting Bypass Fixed

**Problem:** 91.3% of reconfigurations were forced, bypassing rate limiting completely.

**Solution:**
- Modified `_force_reconfiguration()` to respect rate limiting by default
- Added `SKIP_RECONFIG_AFTER_DELETE=true` option to reduce reconfigurations
- Added `EMERGENCY_BYPASS_RECONFIG=false` for rare cases requiring bypass

**Impact:** Drastically reduces Unbound reconfiguration frequency

### 2. Credential Redaction Added

**Problem:** API credentials were exposed in error logs when API calls failed.

**Solution:**
- Added credential redaction to all API client implementations
- Implemented pattern-based redaction for API keys, tokens, and auth credentials
- Applied redaction to both command logging and error messages

**Impact:** Improved security by keeping credentials out of logs

### 3. Cycle-Based Processing

**Problem:** DNS fetch and reconfiguration operations were occurring excessively.

**Solution:**
- Made cycle interval configurable: `DNS_SYNC_INTERVAL=300` (5 min)
- Added change tracking to only reconfigure when changes occur
- Separated cleanup operations: `DNS_CLEANUP_INTERVAL=3600` (hourly)

**Impact:** Reduced API load and unnecessary reconfigurations

## Configuration Changes

### New Environment Variables

```
# Rate Limiting
MIN_RECONFIGURE_INTERVAL=1800     # 30 minutes between reconfigs
SKIP_RECONFIG_AFTER_DELETE=true   # Skip reconfiguration after deletions
EMERGENCY_BYPASS_RECONFIG=false   # Emergency bypass option

# Cycle Intervals
DNS_SYNC_INTERVAL=300             # 5 minutes between syncs
DNS_CLEANUP_INTERVAL=3600         # 1 hour between cleanups
CLEANUP_ON_STARTUP=true           # Run cleanup at startup

# API Security
OPNSENSE_DIRECT_IP=192.168.4.1    # Use direct IP instead of hostname
```

## Usage Recommendations

1. **Single Instance Mode:**
   - Run on one host (babka) instead of multiple hosts
   - Lower MIN_RECONFIGURE_INTERVAL for faster updates if needed

2. **Multi-Instance Mode:**
   - Use different DNS_SYNC_INTERVAL values for each instance
   - Set higher MIN_RECONFIGURE_INTERVAL (1800 or higher)
   - Enable API_JITTER=true on all instances

3. **TrueNAS Scale Tuning:**
   - Set SOCKET_TIMEOUT=5.0 
   - Set CONNECT_TIMEOUT=5
   - Set VERIFY_SSL=false
   - Set FORCE_HTTP1=true

## Monitoring

Look for these key indicators in logs:
- "Reconfiguring Unbound" - should occur much less frequently
- "Changes detected" - indicates actual DNS updates
- "Skipping reconfiguration" - indicates rate limiting is working

The service should now operate with far fewer reconfigurations while maintaining DNS accuracy.

--- 

## Changes in 2.0.4:

- **Modified `api_client.py`**:
    - Added TrueNAS Scale auto-detection
    - Implemented a "curl-first" strategy that uses curl for the initial connection
    - Added options to continue using curl for all operations on TrueNAS Scale
    - Created a smoother fallback mechanism
- **Improved `dns_manager.py`**:
    - Added timeout handling for Unbound reconfiguration
    - Implemented a thread-based approach to prevent reconfiguration from hanging
    - Added automatic fallback to restart if reconfiguration times out
    - Improved error handling for all DNS operations

---

# Changes in 2.0.3: 
- **Modular API Client**: Split the API client into multiple modules following the minimalist multi-module pattern:
    - `api_client_core.py`: Base functionality and configuration
    - `api_client_requests.py`: Primary implementation using requests
    - `api_client_alt.py`: Alternative implementation using curl
    - `api_client.py`: Wrapper that selects the appropriate implementation
- **Socket-Level Timeout Management**:
    - Explicitly set socket timeouts before requests
    - Restore original socket timeout afterward
    - Configure connect and read timeouts separately
- **Connection Resilience**:
    - Improved error handling and retry logic
    - Backoff strategy for reconnection attempts
    - Configurable recovery parameters
- **Protocol Optimizations**:
    - Option to force HTTP/1.1 (which appears more reliable)
    - Configurable SSL verification
- **Optimized Docker Compose**:
    - Platform-specific configuration for TrueNAS Scale
    - Well-documented environment variables

---


# Changes in 2.0.1:
- Detailed debugging for api session

---

# Changes in 2.0.0:
- **Batched DNS Updates**:
    - Instead of making a separate API call for each DNS entry, we batch them together and make a single API call
    - This significantly reduces the number of Unbound restarts
- **Rate Limiting**:
    - Added minimum intervals between API calls and Unbound reconfiguration
    - Enforces a cooldown period after each reconfiguration
- **Improved Error Handling**:
    - Better handling of connection failures
    - Graceful recovery from Unbound restarts
    - Fallback mechanisms when reconfiguration fails
- **Caching**:
    - DNS entries are cached to reduce redundant API calls
    - Intelligent cache invalidation when entries are added/removed
- **Logging Improvements**:
    - Configurable log levels via environment variables
    - More structured and informative logs
